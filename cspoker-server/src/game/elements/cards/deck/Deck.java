/**
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

package game.elements.cards.deck;

import game.elements.cards.Card;
import game.elements.cards.CardImpl;
import game.elements.cards.cardElements.Rank;
import game.elements.cards.cardElements.Suit;
import game.elements.cards.deck.randomGenerator.RandomGenerator;
import game.elements.cards.deck.randomGenerator.RandomOrgSeededRandomGenerator;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * A class to represent a deck of cards.
 *
 * @author Kenzo & Cedric
 *
 */
public class Deck {
	/**
	 * The total number of cards in a deck.
	 */
	public static final int TOTAL_NB_CARDS=52;

	/**
	 * The sequence of cards in this deck.
	 */
	private final List<Card> cards = new ArrayList<Card>(TOTAL_NB_CARDS);

	/**
	 * The position of the last card dealt.
	 */
	private int position;

	private final RandomGenerator generator;

	/**
	 * Construct a new deck of cards and shuffle it.
	 *
	 */
	public Deck(){
		generator = new RandomOrgSeededRandomGenerator();
		for(Suit suit:Suit.values()){
			for(Rank rank:Rank.values()){
				cards.add(new CardImpl(suit, rank));
			}
		}
		shuffle();
	}

	/**
	 * Draw the card on the top of this deck.
	 *
	 * @post	The second card in the deck becomes the new top card
	 * @result	The top card from the deck is returned
	 * @throws	IllegalStateException
	 * 			There must be at least one card in the deck
	 * 			| getDeckSize()<=0
	 */
	public Card drawCard(){
		if(position>=TOTAL_NB_CARDS)
			throw new IllegalStateException();
		position++;
		return cards.get(position-1);
	}

	/**
	 * The deck will consist again of 52 cards
	 * and will be shuffled.
	 *
	 */
	public void newDeal(){
		position=0;
		shuffle();
	}

	/**
	 * Shuffle the cards with the random, generated by the random generator.
	 *
	 */
	private void shuffle(){
		for (int i = 0; i < 2; i++) {
			Collections.shuffle(cards, generator.getRandom());
		}
	}
	/**
	 * Returns the number of cards left in this deck.
	 *
	 */
	public int getDeckSize(){
		return cards.size()-position;
	}
	/**
	 * Returns the textual representation of this deck.
	 *
	 */
	@Override
	public String toString(){
		String result="";
		for(int j=0;j<TOTAL_NB_CARDS;j++){
			result=result+"\n"+cards.get(j).toString();
		}
		return result;
	}

	public static void main(String[] args) {
		System.out.println(new Deck());
	}
}
